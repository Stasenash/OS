using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BinTree
{
    public class Node
    {
        public Node Left { get; set; }
        public Node Right { get; set; }
        public int Key { get; set; }

        public Node(int key)
        {
            Key = key;
        }
    }

    public class BinaryTree
    {
        public Node Root;
        private List<int> result = new List<int>();

        public void Add(Node root, int key)
        {
            while (true)
            {
                if (root.Key.CompareTo(key) <= 0)
                {
                    if (root.Right == null)
                    {
                        root.Right = new Node(key);
                        break;
                    }
                    root = root.Right;
                }
                else
                {
                    if (root.Left == null)
                    {
                        root.Left = new Node(key);
                        break;
                    }
                    root = root.Left;
                }
            }
        }


        public void Add(int key)
        {
            if (Root == null)
                Root = new Node(key);
            else
                Add(Root, key);
        }

        private bool Contains(Node root, int key)
        {
            Node previousRoot = null;
            Node currentRoot = root;
            while (currentRoot != null)
            {
                if (currentRoot.Key.CompareTo(key) == 0)
                    break;
                if (currentRoot.Key.CompareTo(key) < 0)
                {
                    previousRoot = currentRoot;
                    currentRoot = currentRoot.Right;
                }
                else
                {
                    previousRoot = currentRoot;
                    currentRoot = currentRoot.Left;
                }
            }
            return currentRoot != null;
        }

        public bool Contains(int key) => Contains(Root, key);

        public string GetInsideRoot(Node root, char flag)
        {
            StringBuilder stringBuilder = new StringBuilder();
            switch (flag)
            {
                case 'k': break;
                case 'l': stringBuilder.Append(root.Key + "l " + "\n"); break;
                case 'r': stringBuilder.Append(root.Key + "r " + "\n"); break;
            }
            stringBuilder.Append(PassThroughBranch(root, root.Left, 'l'));
            stringBuilder.Append(PassThroughBranch(root, root.Right, 'r'));
            return stringBuilder.ToString();
        }

        private string PassThroughBranch(Node root, Node dir, char ch)
        {
            StringBuilder stringBuilder = new StringBuilder();
            if (dir != null)
            {
                stringBuilder.Append(root.Key + "k ");
                stringBuilder.Append(GetInsideRoot(dir, ch));
            }
            return stringBuilder.ToString();
        }

        public int GetHeight() => GetHeight(Root);

        private int GetHeight(Node root)
        {
            int left, right, height = 0;
            if (root != null)
            {
                left = GetHeight(root.Left);
                right = GetHeight(root.Right);
                height = ((left > right) ? left : right) + 1;
            }
            return height;
        }

        public Node Min(Node root)
        {
            if (root.Left == null)
                return root;
            return Min(root.Left);
        }

        private Node Search(Node root, int value)
        {
            if (root == null || value == root.Key) return root;
            if (value < root.Key) return Search(root.Left, value);
            else return Search(root.Right, value);
        }

        public Node Search(int value) => Search(Root, value);

        private Node Delete(Node root, int value)
        {
            if (root == null)
                return root;
            if (value < root.Key)
                root.Left = Delete(root.Left, value);
            else if (value > root.Key)
                root.Right = Delete(root.Right, value);
            else if (root.Left != null && root.Right != null)
            {
                root.Key = Min(root.Right).Key;
                root.Right = Delete(root.Right, root.Key);
            }
            else
            {
                if (root.Left != null)
                    root = root.Left;
                else
                    root = root.Right;
            }
            if (Contains(root, value))
                Delete(root, value);
            return root;
        }

        public int[] GetSortedArray(Node root)
        {
            if (root != null)
            {
                GetSortedArray(root.Left);
                result.Add(root.Key);
                GetSortedArray(root.Right);
            }
            return result.ToArray();
        }

        public int[] GetSortedNumRec() => GetSortedArray(Root);

        public Node Delete(int value) => Delete(Root, value);

        public override string ToString() => GetInsideRoot(Root, 'k');

        //public string Draw(Node root, int difference, int heigth, char flag)
        //{
        //    StringBuilder stringBuilder = new StringBuilder();
        //    if (root != null)
        //    {
        //        switch (flag)
        //        {
        //            case 'k':
        //                stringBuilder.Append(' ', heigth);
        //                stringBuilder.Append(root.Key + "\n");
        //                break;
        //            case 'l':
        //                stringBuilder.Append(' ', heigth - difference);
        //                stringBuilder.Append(root.Key + "\n");
        //                break;
        //            case 'r':
        //                stringBuilder.Append(' ', heigth + difference);
        //                stringBuilder.Append(root.Key + "\n");
        //                break;
        //        }
        //        int y = Console.CursorTop;
        //        int x = Console.CursorLeft;
        //        stringBuilder.Append(Draw(root.Left, difference + 1, heigth, 'l'));
        //        Console.CursorLeft = x;
        //        Console.CursorTop = y;
        //        stringBuilder.Append(Draw(root.Right, difference + 1, heigth, 'r'));
        //    }
        //    return stringBuilder.ToString();
        //}

        public void Draw(Node root, int difference, int heigth, char flag)
        {
            List<string> values = new List<string>();
            if (root != null)
            {
                switch (flag)
                {
                    case 'k':
                        Console.Write(new string(' ', heigth));
                        Console.Write(root.Key + "\n");
                        break;
                    case 'l':
                        values.Add(new string(' ', heigth - difference));
                        values.Add(root.Key + "    \n");
                        break;
                    case 'r':
                        values.Add(new string(' ', heigth + difference));
                        values.Add(root.Key + "\n");
                        break;
                }
                int y = Console.CursorTop;
                int x = Console.CursorLeft;
                Draw(root.Left, difference + 1, heigth, 'l');
                Console.SetCursorPosition(x, y);
                Draw(root.Right, difference + 1, heigth, 'r');
                foreach (var el in values)
                    Console.Write(el);
                Console.WriteLine();
                Console.SetCursorPosition(x, heigth + difference);
            }
        }

        public void DrawAnother(Node root, int treeHeight, int level)
        {
            int spaceCount = level + 2;
            Console.Write(new string(' ', spaceCount));
            Console.Write("|-");
            if (root != null)
            {
                Console.Write(root.Key);
                Console.WriteLine();
                DrawAnother(root.Left, treeHeight, level + 1);
                DrawAnother(root.Right, treeHeight, level + 1);
            }
        }

        public void PrintTree(Node root, String indent, bool last, string mod)
        {
            if (root == null) return;
            Console.WriteLine(indent + "+- " + (string.IsNullOrEmpty(mod) ? "" : ("(" + mod +") ")) + root.Key);
            indent += last ? "   " : "|  ";

            PrintTree(root.Left, indent, false, "l");
            PrintTree(root.Right, indent, true, "r");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            BinaryTree binTree = new BinaryTree();
            Random rnd = new Random();
            int nodeCount = rnd.Next(15, 50);
            int[] nodesArray = new int[nodeCount];

            for (int i = 0; i < nodeCount; i++)
                binTree.Add(rnd.Next(1, 50));
            Console.WriteLine("Бинарное дерево поиска из первой части задания:\n" + binTree);

            // binTree.Draw(binTree.Root, 0, binTree.GetHeight(), 'k');

            binTree.PrintTree(binTree.Root, "", true, null);


            int[] arr = binTree.GetSortedNumRec();

            
            Console.WriteLine("Высота дерева 1: " + binTree.GetHeight() + "\n");


            BinaryTree bigBT = new BinaryTree();

            for (int i = 0; i < 50; i++)
                bigBT.Add(rnd.Next(1, 25));
            Console.WriteLine("Бинарное дерево поиска из второй части задания:\n" + bigBT);
            Console.Write("Введите вершину, которую хотите удалить: ");
            int x = 0;
            int.TryParse(Console.ReadLine(), out x);
            if (!bigBT.Contains(x))
                Console.WriteLine("Вершины не существует");
            else
            {
                bigBT.Root = bigBT.Delete(x);
                Console.WriteLine("Дерево с удаленной вершиной:\n" + bigBT);
            }
        }
    }
}
